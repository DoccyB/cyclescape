%form.formtastic.user_location
  %fieldset.inputs
    %ol
      %li.string.input.optional.stringish
        .left{style: "float: left"}
          %label.label{for: "user_location", style: "width: auto"}
            My location
          %a#auto_detect.btn-grey.hide{href: "#", title: "Create a location based on where you are now"} Use current location
        .leaflet-search-outside#user_location
        .leaflet-search-outside#dest_location
      %li
        %label.location-presets.hide
          = check_box_tag :area_around_me
          Area around me
        %label.location-presets.hide
          = check_box_tag :constituency
          My ward / constituency

= semantic_form_for @location do |f|
  = f.inputs do
    = f.input :loc_json, as: :hidden
    %li.input
      = f.semantic_errors :location
      = render partial: "shared/edit_map", locals: {resource: @location, location: @start_location, skip: true, no_search: true}
    = f.input :category
  = f.actions do
    = f.action :submit, button_html: {class: "btn-big-green"}

:javascript
  $(document).ready(function() {
    var map, startSearchControl, destSearchControl, startSearchEl, destSearchEl, startLocation, destLocation;
    map = new LeafletMap($(".map-data").data('center'), $(".map-data").data('opts'));
    startSearchControl = map.addSearchControl(
      {autoCollapse: false, collapsed: false, circleLocation: false, startLocation: true, textPlaceholder: "Start/home location"}
    );
    destSearchControl = map.addSearchControl(
      {autoCollapse: false, collapsed: false, circleLocation: false, destLocation: true, textPlaceholder: "Regular destination (optional)"}
    );
    startSearchEl = startSearchControl.getContainer();
    destSearchEl = destSearchControl.getContainer();
    $("#user_location").append(startSearchEl);
    $("#dest_location").append(destSearchEl);
    startSearchControl.on("search_locationfound", function(e) {
      $(".location-presets").show();
      startLocation = [e.latlng.lat, e.latlng.lng];
    });
    startSearchControl.on("search_locationfound", function(e) {
      destLocation = [e.latlng.lat, e.latlng.lng];
    });
    $("#area_around_me").change(function(e) {
      if(e.target.checked) {
        map.drawCircle(startLocation);
      } else {
        map.removeCircle();
      }
    })

    $("#constituency").change(function(e) {
      if(e.target.checked) {
        $.ajax({
          url: "/api/constituencies",
          data: { geo: L.marker(startLocation).toGeoJSON().geometry },
          dataType: jsonpTransportRequired() ? 'jsonp' : void 0,
          timeout: 10000,
          success: function(constituencyGeo) {
            map.drawConstituency(constituencyGeo);
          }
        })
      } else {
        map.drawConstituency();
      }
    })

    if (navigator.geolocation) {
      var updateLocation = function(position){
        map.drawCircle(position.coords);
      }
      $("#auto_detect").css('display','inline-block').click(function() {
        navigator.geolocation.getCurrentPosition(updateLocation);
      });
    }
  });
