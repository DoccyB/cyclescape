:javascript
  var geo_field = "#{thing.class.name.underscore}_loc_json"
  var point_zoom = "#{Geo::POINT_ZOOM}"

:ruby
  @map = basic_map do |map, page|
    if @start_location.geometry_type == RGeo::Feature::Point
      z = @start_location.z || Geo::POINT_ZOOM
      page << map.setCenter(OpenLayers::LonLat.new(@start_location.x, @start_location.y).transform(projection, map.getProjectionObject()),z);
    else
      bbox = RGeo::Cartesian::BoundingBox.new(@start_location.factory)
      bbox.add(@start_location)
      page << map.zoomToExtent(OpenLayers::Bounds.new(bbox.min_x, bbox.min_y, bbox.max_x, bbox.max_y).transform(projection, map.getProjectionObject()))
    end

    vectorlayer = MapLayers::JsVar.new("vectorlayer")
    page.assign(vectorlayer, OpenLayers::Layer::Vector.new("Vectors", {projection: projection, styleMap: 'MapStyle.editStyle()'.to_sym}))
    page << map.add_layer(vectorlayer)

    area_only = false unless area_only
    page << "MapEdit.init(map, vectorlayer, geo_field, point_zoom, #{area_only})"
  end

%div#map.map.edit
  .map-tools-overlay
    %ul.tabs
      %li.area
        %a(href='#area')
          %span.area
          = t ".area"
      %li.route
        %a(href='#route')
          %span.route
          = t ".route"
      %li.point
        %a(href='#point')
          %span.point
          = t ".point"

    .panes
      #area.pane.area
        %h3= t ".draw_area"
        %p= t ".draw_area_1"
        %p= t ".draw_area_2"
        %p= t ".draw_area_3"
      #route.pane.route
        %h3= t ".draw_route"
        %p= t ".draw_route_1"
        %p= t ".draw_route_2"
        %p= t ".draw_route_3"
      #point.pane.point
        %h3= t ".draw_point"
        %p= t ".draw_point_1"
        %p= t ".draw_point_2"
        %p= t ".draw_point_3"
    %ul.undo-clear
      %li
        %a.edit-undo
          %span.icon-undo
          %span.txt
            = t ".undo"
      %li
        %a.edit-clear
          %span.icon-clear
          %span.txt
            = t ".clear"
  = render partial: "shared/map_search", locals: {map_id: "map"}
  != @map.to_html
